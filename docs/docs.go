// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "GNU GPL v3.0"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/script/batch_execute": {
            "post": {
                "description": "Возвращает результат выполнения скриптов и ошибок (если есть)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "script"
                ],
                "summary": "Выполнить набор скриптов под конкретными ID",
                "parameters": [
                    {
                        "description": "Набор идентфикаторов и аргументов",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.ExecuteByIdRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.ScriptResp"
                            }
                        }
                    }
                }
            }
        },
        "/script/batch_execute_by_ids": {
            "post": {
                "description": "Возвращает результат выполнения скриптов и ошибок (если есть)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "script"
                ],
                "summary": "Выполнить набор скриптов под конкретными ID с идентичным аргументом для всех",
                "parameters": [
                    {
                        "description": "Набор идентфикаторов и единый аргумент",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.BatchExecuteByIdsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.ScriptResp"
                            }
                        }
                    }
                }
            }
        },
        "/script/execute": {
            "post": {
                "description": "Возвращает результат выполнения скрипта и ошибку (если есть)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "script"
                ],
                "summary": "Выполнить скрипт без учёта идентификатора",
                "parameters": [
                    {
                        "description": "Скрипт необходимый к выполнению",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.ExecuteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ScriptResp"
                        }
                    }
                }
            }
        },
        "/script/execute_by_id": {
            "post": {
                "description": "Возвращает результат выполнения скрипта и ошибку (если есть)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "script"
                ],
                "summary": "Выполнить скрипт под конкректным ID",
                "parameters": [
                    {
                        "description": "Идентифиактор скрипта",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.ExecuteByIdRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ScriptResp"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/structure.GrpcError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.BatchExecuteByIdsRequest": {
            "type": "object",
            "properties": {
                "arg": {
                    "type": "object"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "domain.Error": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "domain.ExecuteByIdRequest": {
            "type": "object",
            "properties": {
                "arg": {
                    "type": "object"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "domain.ExecuteRequest": {
            "type": "object",
            "properties": {
                "arg": {
                    "type": "object"
                },
                "script": {
                    "type": "string"
                }
            }
        },
        "domain.ScriptResp": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/domain.Error"
                },
                "result": {
                    "type": "object"
                }
            }
        },
        "structure.GrpcError": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "errorCode": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.0",
	Host:        "localhost:9024",
	BasePath:    "/api/script",
	Schemes:     []string{},
	Title:       "isp-script-service",
	Description: "{описание сервиса}",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
